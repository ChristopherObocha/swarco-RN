require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'
require_relative '../node_modules/react-native-permissions/scripts/setup'

def min_ios_version_supported
  return '13.0'
end

platform :ios, min_ios_version_supported

prepare_react_native_project!

# ⬇️ uncomment wanted permissions (don't forget to remove the last comma)
setup_permissions([
  'AppTrackingTransparency',
  # 'BluetoothPeripheral',
  # 'Calendars',
  # 'Camera',
  # 'Contacts',
  'FaceID',
  'LocationAccuracy',
  # 'LocationAlways',
  'LocationWhenInUse',
  # 'MediaLibrary',
  # 'Microphone',
  # 'Motion',
  'Notifications',
  # 'PhotoLibrary',
  # 'PhotoLibraryAddOnly',
  # 'Reminders',
  # 'SpeechRecognition',
  # 'StoreKit'
])

# If you are using a `react-native-flipper` your iOS build will fail when `NO_FLIPPER=1` is set.
# because `react-native-flipper` depends on (FlipperKit,...) that will be excluded
#
# To fix this you can also exclude `react-native-flipper` using a `react-native.config.js`
# ```js
# module.exports = {
#   dependencies: {
#     ...(process.env.NO_FLIPPER ? { 'react-native-flipper': { platforms: { ios: null } } } : {}),
# ```
flipper_config = ENV['NO_FLIPPER'] == "1" ? FlipperConfiguration.disabled : FlipperConfiguration.enabled

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target 'thecoreui' do
  use_expo_modules!
  post_integrate do |installer|
    begin
      expo_patch_react_imports!(installer)
    rescue => e
      Pod::UI.warn e
    end
  end

  # React Native Maps dependencies
  # The following line is only needed if building on an Apple silicon Mac without rosetta.
  pod 'Google-Maps-iOS-Utils', :git => 'https://github.com/Simon-TechForm/google-maps-ios-utils.git', :branch => 'feat/support-apple-silicon'

  rn_maps_path = '../node_modules/react-native-maps'
  pod 'react-native-google-maps', :path => rn_maps_path

  config = use_native_modules!
  
  $RNFirebaseAnalyticsWithoutAdIdSupport = true
 
  use_frameworks! :linkage => :static # for Firebase
  $RNFirebaseAsStaticFramework = true # for Firebase

  # Flags change depending on the env values.
  flags = get_default_flags()

  use_react_native!(
    :path => config[:reactNativePath],
    # Hermes is now enabled by default. Disable by setting this flag to false.
    # Upcoming versions of React Native may rely on get_default_flags(), but
    # we make it explicit here to aid in the React Native upgrade process.
    :hermes_enabled => flags[:hermes_enabled],
    :fabric_enabled => flags[:fabric_enabled],
    # Enables Flipper.
    #
    # Note that if you have use_frameworks! enabled, Flipper will not work and
    # you should disable the next line.
    :flipper_configuration => FlipperConfiguration.disabled,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )
  
  $FirebaseSDKVersion = '10.7.0' # for Firebase

  # Access / link font files to be compiled
  # Applies vector icons used by React Native Elements directly from the package so we don't have
  # copy them in the project
  pod 'RNVectorIcons', :path => '../node_modules/react-native-vector-icons'

  target 'thecoreuiTests' do
    inherit! :complete
    # Pods for testing
  end

  post_install do |installer|
    react_native_post_install(
      installer,
      # Set `mac_catalyst_enabled` to `true` in order to apply patches
      # necessary for Mac Catalyst builds
      :mac_catalyst_enabled => false
    )
    __apply_Xcode_12_5_M1_post_install_workaround(installer)

 # Check the Xcode version
 xcode_version = `xcodebuild -version | grep "Xcode " | cut -d ' ' -f2`.strip

 # Split the version string into major and minor components
 major_version, minor_version = xcode_version.split('.').map(&:to_i)

 # Compare the major version to check if it's Xcode 15 and the minor version to ensure it's not Xcode 16 or higher
 if major_version == 15 && minor_version < 16
   installer.pods_project.targets.each do |target|
     target.build_configurations.each do |config|
       config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)', '_LIBCPP_ENABLE_CXX17_REMOVED_UNARY_BINARY_FUNCTION']
     end
   end
 end
   
    
    # for Firebase (all below)
        installer.pods_project.targets.each do |target|
          target.build_configurations.each do |config|
            config.build_settings["GCC_WARN_INHIBIT_ALL_WARNINGS"] = "YES"
          end
        end
        
        installer.pods_project.targets.each do |target|
          target.build_configurations.each do |config|
            config.build_settings["CC"] = "clang"
            config.build_settings["LD"] = "clang"
            config.build_settings["CXX"] = "clang++"
            config.build_settings["LDPLUSPLUS"] = "clang++"
          end
        end
        
        installer.aggregate_targets.each do |aggregate_target|
          aggregate_target.user_project.native_targets.each do |target|
            target.build_configurations.each do |config|
              config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'
              config.build_settings['EXCLUDED_ARCHS'] = 'i386'
            end
          end
          aggregate_target.user_project.save
        end
        installer.pods_project.targets.each do |target|
          if (target.name.eql?('FBReactNativeSpec'))
            target.build_phases.each do |build_phase|
              if (build_phase.respond_to?(:name) && build_phase.name.eql?('[CP-User] Generate Specs'))
                target.build_phases.move(build_phase, 0)
              end
            end
          end
        end
        
        installer.pods_project.targets.each do |target|
          target.build_configurations.each do |config|
            config.build_settings["ENABLE_BITCODE"] = "NO"
          end
        end
            
            
  end
end
